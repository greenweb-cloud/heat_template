heat_template_version: 2016-04-08

description: Stack that launches a single server

parameters:
  public_network:
    type: string
    default: public_name
  image:
    type: string
    constraints:
      - custom_constraint: glance.image
    default: image_id 
  flavor:
    type: string
    constraints:
      - custom_constraint: nova.flavor
    default: flavor_id
  ssh_keys:
    type: string
    description: Name of a KeyPair to enable SSH access to the instance
    default: key_name
  volume_size_db:
    type: number
    default: 5
  volume_size_www:
    type: number
    default: 5
  

resources:
  host:
    type: OS::Nova::Server
    depends_on: [ cloud-init-config, port , router ]
    properties:
      name: 
        list_join: [ '-', [ { get_param: "OS::stack_name" }, 'example-server' ]]
      user_data_format: RAW
      user_data: { get_resource: cloud-init-config }    
      image: { get_param: image } 
      flavor: { get_param: flavor } 
      networks:
        - port: { get_resource: port }
      key_name: { get_param: ssh_keys }
  
  cloud-init-config:
   # cloud init resource
   type: OS::Heat::CloudConfig
   properties:
    cloud_config:
      manage_etc_hosts: true
      runcmd:
        - 'mkdir -p /var/lib/mysql'
        - 'mkdir -p /var/www'
      fs_setup:
        - label: volumedb
          filesystem: ext4
          partition: none
          device: /dev/vdb
        - label: volumewww
          filesystem: ext4
          partition: none
          device: /dev/vdc
      mounts:
        - [ "LABEL=volumedb", "/var/lib/mysql" ]
        - [ "LABEL=volumewww", "/var/www" ]
      packages:
        - nginx
        - mariadb-server

  volume_db:
    type: OS::Cinder::Volume
    properties:
      name: 
        list_join: [ '_', [{ get_attr: [host, name] }, 'db']]
      size: { get_param: volume_size_db }

  volume_www:
    type: OS::Cinder::Volume
    properties:
      name: 
        list_join: [ '_', [{ get_attr: [host, name] }, 'www']]
      size: { get_param: volume_size_www }

  volume_db_attachment:
    type: OS::Cinder::VolumeAttachment
    depends_on: [ volume_db, host ]
    properties:
      volume_id: { get_resource: volume_db }
      instance_uuid: { get_resource: host }

  volume_www_attachment:
    type: OS::Cinder::VolumeAttachment
    depends_on: [ volume_www, host, volume_db_attachment ]
    properties:
      volume_id: { get_resource: volume_www }
      instance_uuid: { get_resource: host }

  allow_ssh:
    type: OS::Neutron::SecurityGroup
    properties:
      description: allow incoming SSH and ICMP traffic from anywhere.
      name: 
        list_join: [ '-', [ { get_param: "OS::stack_name" }, 'kickstart', 'allow incoming traffic, tcp port 22 and icmp']]
      rules: 
        - { direction: ingress, remote_ip_prefix: 0.0.0.0/0, protocol: tcp } 
        - { direction: ingress, remote_ip_prefix: 0.0.0.0/0, protocol: icmp } 

  net:
    type: OS::Neutron::Net
    properties: 
      name: 
        list_join: [ '-', [ { get_param: "OS::stack_name" }, 'example-net' ]]

  subnet:
    type: OS::Neutron::Subnet
    depends_on: [ net ]
    properties:
      name: 
        list_join: [ '-', [ { get_param: "OS::stack_name" }, 'example-subnet' ]]
      dns_nameservers:
        - 8.8.8.8
        - 8.8.4.4
      network: { get_resource: net }
      ip_version: 4
      cidr: 10.0.0.0/24
      allocation_pools:
      - {start: 10.0.0.10, end: 10.0.0.250}

  router:
    type: OS::Neutron::Router
    properties:
      external_gateway_info: {"network": { get_param: public_network }}
      name: 
        list_join: [ '-', [ { get_param: "OS::stack_name" }, 'example-router' ]]

  router_subnet_bridge:
    type: OS::Neutron::RouterInterface
    depends_on: [ router, subnet ]
    properties:
      router: { get_resource: router }
      subnet: { get_resource: subnet }

  port:
    type: OS::Neutron::Port
    depends_on: [ net ]
    properties:
      network: { get_resource: net }
      security_groups: [ get_resource: allow_ssh ]

  floating_ip:
    type: OS::Neutron::FloatingIP
    depends_on: [ port, router_subnet_bridge,host ]
    properties:
      floating_network: { get_param: public_network }
      port_id: { get_resource: port }
      